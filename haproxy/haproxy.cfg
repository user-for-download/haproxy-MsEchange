global
    log 127.0.0.1 local0 info
    log 127.0.0.1 local1 emerg
    log 127.0.0.1 local2 notice
    #nbthread 8            # Adjusted to 8 threads; match to your CPU cores
    #cpu-map auto:1-8 0-7  # Maps threads to CPU cores 0-7 for better performance
    chroot /var/lib/haproxy
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    tune.ssl.default-dh-param 4096
    ssl-default-bind-ciphers TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphers TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
    mode http
    log global
    option http-keep-alive
    option dontlognull
    option redispatch
    retries 3
    timeout http-request 15s
    timeout queue 1m
    timeout connect 10s
    timeout client 10m         
    timeout server 10m
    timeout http-keep-alive 15s
    timeout check 10s
    maxconn 20000

    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Tt %ST %B %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# HAProxy stats interface
listen stats
    bind *:8181
    mode http
    stats enable
    stats uri /haproxystats
    stats refresh 15s
    stats show-legends
    stats realm Haproxy\ Statistics
    stats auth admin:123123
    acl local_net src 10.10.10.0/24
    http-request deny unless local_net


frontend fe_exch2019
    bind *:80
    bind *:443 ssl crt /etc/ssl/mail/cert_20250201.pem alpn h2,http/1.1
    mode http
    option httplog
    option forwardfor
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; frame-ancestors 'self'"
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    acl autodiscover path_beg -i /autodiscover
    acl mapi_service path_beg -i /mapi
    acl owa_service path_beg -i /owa
    acl msa_service path_beg -i /microsoft-server-activesync
    acl ews_service path_beg -i /ews
    acl dangerous_extensions path_end -i .asp .cgi .pl .exe
    acl dangerous_paths path_beg -i /aspnet_client /powershell
    acl is_root path -i /
    http-request deny if dangerous_extensions || dangerous_paths
    http-request redirect location /owa/ code 302 if is_root
    redirect scheme https code 301 if !{ ssl_fc }
    use_backend letsencrypt-backend if letsencrypt-acl
    use_backend be_exch2019_autodiscover if autodiscover
    use_backend be_exch2019_mapi if mapi_service
    use_backend be_exch2019_owa if owa_service
    use_backend be_exch2019_activesync if msa_service
    use_backend be_exch2019_ews if ews_service
    default_backend be_404

backend be_404
    mode http
    errorfile 404 /etc/haproxy/errors/404.http
    errorfile 503 /etc/haproxy/errors/404.http

# SMTP frontend (TCP mode)
frontend fe_exch2019_smtp
    mode tcp
    option tcplog
    bind *:25
    default_backend be_exch2019_smtp

# Letsencrypt backend for ACME challenges
backend letsencrypt-backend
    mode http
    server letsencrypt 127.0.0.1:8888

# Autodiscover backend
backend be_exch2019_autodiscover
    mode http
    balance leastconn
    option httpchk GET /autodiscover/healthcheck.htm
    http-check expect status 200
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server exch02 10.10.10.36:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt maxconn 5000 inter 20s rise 2 fall 3
    server exch03 10.10.10.37:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt maxconn 5000 inter 20s rise 2 fall 3

# MAPI backend
backend be_exch2019_mapi
    mode http
    balance leastconn
    option httpchk GET /mapi/healthcheck.htm
    http-check expect status 200
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server exch02 10.10.10.36:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3
    server exch03 10.10.10.37:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3

# OWA backend with session persistence
backend be_exch2019_owa
    mode http
    balance leastconn
    cookie SERVERID insert indirect nocache
    option httpchk GET /owa/healthcheck.htm
    http-check expect status 200
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server exch02 10.10.10.36:443 cookie exch02 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3
    server exch03 10.10.10.37:443 cookie exch03 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3

# ActiveSync backend
backend be_exch2019_activesync
    mode http
    balance leastconn
    option httpchk GET /microsoft-server-activesync/healthcheck.htm
    http-check expect status 200
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server exch02 10.10.10.36:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3
    server exch03 10.10.10.37:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt verifyhost mail.test.com maxconn 5000 inter 10s rise 2 fall 3

# EWS backend with source-based persistence
backend be_exch2019_ews
    mode http
    balance source
    option httpchk GET /ews/healthcheck.htm
    http-check expect status 200
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server exch02 10.10.10.36:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt maxconn 2000 inter 10s rise 2 fall 3
    server exch03 10.10.10.37:443 check ssl verify required ca-file /etc/pki/tls/certs/ca-bundle.crt maxconn 2000 inter 10s rise 2 fall 3

# SMTP backend with TCP health checks
backend be_exch2019_smtp
    mode tcp
    balance source
    option tcp-check
    tcp-check connect
    tcp-check expect string 220
    server exch02 10.10.10.36:25 weight 75 check inter 5s rise 2 fall 3 maxconn 500
    server exch03 10.10.10.37:25 weight 25 check inter 5s rise 2 fall 3 maxconn 500